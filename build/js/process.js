"use strict";function registerServiceWorker(){if(!1 in navigator)throw new Error("serviceWorker not register");navigator.serviceWorker.register("/sw.js").then(function(e){var n;navigator.serviceWorker.controller&&(e.active&&console.log("There is an an active service worker"),e.waiting&&(console.log("waiting :",e.waiting),console.log("service worker is waiting"),updateServiceWorker(e.waiting)),e.installing&&(console.log("installing : ",e),console.log("service worker status is installing"),trackInstalling(e.installing)),e.addEventListener("updatefound",function(){console.log("service worker update found",e),trackInstalling(e.installing)}),navigator.serviceWorker.addEventListener("controllerchange",function(){n||setTimeout(function(){window.location.reload(),n=!0},1e3)}))}).catch(function(e){console.log("Registration failed with "+e)})}function trackInstalling(e){e?e.addEventListener("statechange",function(){console.log("ServiceWorker state was changed to "+e.state),"installed"===e.state&&(console.log("Service worker installed and waiting for activation",e),updateServiceWorker(e))}):console.log("Worker not defined!")}function updateServiceWorker(e){sendMessageToServiceWorker({action:"skipWaiting"},e).then(function(e){console.log(e)})}function sendMessageToServiceWorker(r,t){return new Promise(function(n,o){var e=new MessageChannel;e.port1.onmessage=function(e){e.data.error?o(e.data.error):n(e.data)},t.postMessage(r,[e.port2])})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2Nlc3MuanMiXSwibmFtZXMiOlsicmVnaXN0ZXJTZXJ2aWNlV29ya2VyIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwidGhlbiIsInJlZyIsInJlZnJlc2hpbmciLCJjb250cm9sbGVyIiwiYWN0aXZlIiwiY29uc29sZSIsImxvZyIsIndhaXRpbmciLCJpbnN0YWxsaW5nIiwiYWRkRXZlbnRMaXN0ZW5lciIsIndpbmRvdyIsInJlbG9hZCIsInNldFRpbWVvdXQiLCJjYXRjaCIsImVycm9yIiwidHJhY2tJbnN0YWxsaW5nIiwiaW5zdGFsbGluZ1dvcmtlciIsInN0YXRlIiwidXBkYXRlU2VydmljZVdvcmtlciIsIndvcmtlciIsInNlbmRNZXNzYWdlVG9TZXJ2aWNlV29ya2VyIiwicmVzcG9uc2VGcm9tU3ciLCJtc2ciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm1zZ0NoYW4iLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwib25tZXNzYWdlIiwiZXZlbnQiLCJkYXRhIiwicG9zdE1lc3NhZ2UiLCJwb3J0MiJdLCJtYXBwaW5ncyI6ImFBQ0EsU0FBU0Esd0JBRFQsSUFBQSxLQUFBQyxVQUNBLE1BQVNELElBQUFBLE1BQUFBLDhCQUdOQyxVQUFBQyxjQUFBQyxTQUFBLFVBQUFDLEtBQUEsU0FBQUMsR0F5QkUsSUFIREMsRUFuQktMLFVBQVVDLGNBQWNLLGFBQzNCRixFQUFBRyxRQUNEQyxRQUFBQyxJQUFBLHdDQUdBTCxFQUFBTSxVQUdDRixRQUFRQyxJQUFJLFlBQWFMLEVBQUlNLFNBRC9CRixRQUFRRSxJQUFBQSw2QkFDTkYsb0JBQVlKLEVBQVpNLFVBR0ROLEVBQUFPLGFBR0NILFFBQVFDLElBQUksZ0JBQWlCTCxHQUQvQkksUUFBUUcsSUFBQUEsdUNBQ05ILGdCQUFZSixFQUFBTyxhQUdiUCxFQUFBUSxpQkFBQSxjQUFBLFdBR0NKLFFBQVFDLElBQUksOEJBQStCTCxHQUQ3Q0EsZ0JBQUlRLEVBQWlCRCxjQU1yQlgsVUFBVUMsY0FBY1csaUJBQWlCLG1CQUFvQixXQUR6RFAsR0FDSkwsV0FBVUMsV0FDUlksT0FBSVIsU0FBWVMsU0FDaEJDLEdBQVcsR0FDVEYsVUFISkcsTUFBQSxTQUFBQyxHQTFCRlQsUUFrQ1NDLElBQUEsNEJBQWlCUSxLQUs1QixTQUFTQyxnQkFBZ0JDLEdBQXpCQSxFQUlHQSxFQUFBUCxpQkFBQSxjQUFBLFdBQ0RPLFFBQUFBLElBQUFBLHNDQUFpREEsRUFBWUMsT0FDL0MsY0FBWlosRUFBWVksUUFDWlosUUFBSVcsSUFBQUEsc0RBQXdDQSxHQUMxQ1gsb0JBQVlXLE1BUGhCWCxRQUFLVyxJQUFBQSx1QkFhUCxTQUFTRSxvQkFBb0JDLEdBQTdCQywyQkFBNkJELENBQUFBLE9BQVEsZUFBQUEsR0FDbkNDLEtBQUFBLFNBQUFBLEdBRUlmLFFBQVFDLElBQUllLEtBSWxCLFNBQVNELDJCQUEyQkUsRUFBS0gsR0FDdkMsT0FBTyxJQUFJSSxRQUFRLFNBQVVDLEVBQVNDLEdBQ3BDLElBQUlDLEVBQVUsSUFBSUMsZUFHbEJELEVBQVFFLE1BQU1DLFVBQVksU0FBVUMsR0FDOUJBLEVBQU1DLEtBQUtqQixNQUNiVyxFQUFPSyxFQUFNQyxLQUFLakIsT0FFbEJVLEVBQVFNLEVBQU1DLE9BSWxCWixFQUFPYSxZQUFZVixFQUFLLENBQUNJLEVBQVFPIiwiZmlsZSI6InByb2Nlc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBSZWdpc3RlciBzZXJ2aWNlIHdvcmtlciB3aXRoIGV2ZW50cyAqL1xyXG5mdW5jdGlvbiByZWdpc3RlclNlcnZpY2VXb3JrZXIoKSB7XHJcbiAgaWYgKCEnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NlcnZpY2VXb3JrZXIgbm90IHJlZ2lzdGVyJyk7XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignL3N3LmpzJykudGhlbihmdW5jdGlvbiAocmVnKSB7XHJcbiAgICBpZiAoIW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlZy5hY3RpdmUpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1RoZXJlIGlzIGFuIGFuIGFjdGl2ZSBzZXJ2aWNlIHdvcmtlcicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZWcud2FpdGluZykge1xyXG4gICAgICBjb25zb2xlLmxvZygnd2FpdGluZyA6JywgcmVnLndhaXRpbmcpO1xyXG4gICAgICBjb25zb2xlLmxvZygnc2VydmljZSB3b3JrZXIgaXMgd2FpdGluZycpO1xyXG4gICAgICB1cGRhdGVTZXJ2aWNlV29ya2VyKHJlZy53YWl0aW5nKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVnLmluc3RhbGxpbmcpIHtcclxuICAgICAgY29uc29sZS5sb2coJ2luc3RhbGxpbmcgOiAnLCByZWcpO1xyXG4gICAgICBjb25zb2xlLmxvZygnc2VydmljZSB3b3JrZXIgc3RhdHVzIGlzIGluc3RhbGxpbmcnKTtcclxuICAgICAgdHJhY2tJbnN0YWxsaW5nKHJlZy5pbnN0YWxsaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICByZWcuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlZm91bmQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdzZXJ2aWNlIHdvcmtlciB1cGRhdGUgZm91bmQnLCByZWcpO1xyXG4gICAgICB0cmFja0luc3RhbGxpbmcocmVnLmluc3RhbGxpbmcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIHJlZnJlc2hpbmc7XHJcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5hZGRFdmVudExpc3RlbmVyKCdjb250cm9sbGVyY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAocmVmcmVzaGluZykgcmV0dXJuO1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgcmVmcmVzaGluZyA9IHRydWU7XHJcbiAgICAgIH0sIDEwMDApO1xyXG4gICAgfSk7XHJcblxyXG4gIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgY29uc29sZS5sb2coJ1JlZ2lzdHJhdGlvbiBmYWlsZWQgd2l0aCAnICsgZXJyb3IpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0cmFja0luc3RhbGxpbmcoaW5zdGFsbGluZ1dvcmtlcikge1xyXG4gIGlmICghaW5zdGFsbGluZ1dvcmtlcikge1xyXG4gICAgY29uc29sZS5sb2coJ1dvcmtlciBub3QgZGVmaW5lZCEnKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaW5zdGFsbGluZ1dvcmtlci5hZGRFdmVudExpc3RlbmVyKCdzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnNvbGUubG9nKCdTZXJ2aWNlV29ya2VyIHN0YXRlIHdhcyBjaGFuZ2VkIHRvICcgKyBpbnN0YWxsaW5nV29ya2VyLnN0YXRlKTtcclxuICAgIGlmIChpbnN0YWxsaW5nV29ya2VyLnN0YXRlID09PSAnaW5zdGFsbGVkJykge1xyXG4gICAgICBjb25zb2xlLmxvZygnU2VydmljZSB3b3JrZXIgaW5zdGFsbGVkIGFuZCB3YWl0aW5nIGZvciBhY3RpdmF0aW9uJywgaW5zdGFsbGluZ1dvcmtlcik7XHJcbiAgICAgIHVwZGF0ZVNlcnZpY2VXb3JrZXIoaW5zdGFsbGluZ1dvcmtlcik7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVNlcnZpY2VXb3JrZXIod29ya2VyKSB7XHJcbiAgc2VuZE1lc3NhZ2VUb1NlcnZpY2VXb3JrZXIoe2FjdGlvbjogJ3NraXBXYWl0aW5nJ30sIHdvcmtlcilcclxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZUZyb21Tdykge1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZUZyb21Tdyk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VuZE1lc3NhZ2VUb1NlcnZpY2VXb3JrZXIobXNnLCB3b3JrZXIpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgdmFyIG1zZ0NoYW4gPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcclxuXHJcbiAgICAvLyBIYW5kbGVyIGZvciByZWNpZXZpbmcgbWVzc2FnZSByZXBseSBmcm9tIHNlcnZpY2Ugd29ya2VyXHJcbiAgICBtc2dDaGFuLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICBpZiAoZXZlbnQuZGF0YS5lcnJvcikge1xyXG4gICAgICAgIHJlamVjdChldmVudC5kYXRhLmVycm9yKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvbHZlKGV2ZW50LmRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gU2VuZCBtZXNzYWdlIHRvIHNlcnZpY2Ugd29ya2VyIGFsb25nIHdpdGggcG9ydCBmb3IgcmVwbHlcclxuICAgIHdvcmtlci5wb3N0TWVzc2FnZShtc2csIFttc2dDaGFuLnBvcnQyXSk7XHJcbiAgfSk7XHJcbn0iXX0=
