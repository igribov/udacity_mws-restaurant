"use strict";var _slicedToArray=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){i=!0,a=t}finally{try{!r&&u.return&&u.return()}finally{if(i)throw a}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},_createClass=function(){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}}();function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}!function a(o,u,s){function c(e,t){if(!u[e]){if(!o[e]){var n="function"==typeof require&&require;if(!t&&n)return n(e,!0);if(l)return l(e,!0);var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}var i=u[e]={exports:{}};o[e][0].call(i.exports,function(t){return c(o[e][1][t]||t)},i,i.exports,a,o,u,s)}return u[e].exports}for(var l="function"==typeof require&&require,t=0;t<s.length;t++)c(s[t]);return c}({1:[function(t,h,e){!function(){function o(n){return new Promise(function(t,e){n.onsuccess=function(){t(n.result)},n.onerror=function(){e(n.error)}})}function a(n,r,i){var a,t=new Promise(function(t,e){o(a=n[r].apply(n,i)).then(t,e)});return t.request=a,t}function t(t,n,e){e.forEach(function(e){Object.defineProperty(t.prototype,e,{get:function(){return this[n][e]},set:function(t){this[n][e]=t}})})}function e(e,n,r,t){t.forEach(function(t){t in r.prototype&&(e.prototype[t]=function(){return a(this[n],t,arguments)})})}function n(e,n,r,t){t.forEach(function(t){t in r.prototype&&(e.prototype[t]=function(){return this[n][t].apply(this[n],arguments)})})}function r(t,r,e,n){n.forEach(function(n){n in e.prototype&&(t.prototype[n]=function(){return t=this[r],(e=a(t,n,arguments)).then(function(t){if(t)return new u(t,e.request)});var t,e})})}function i(t){this._index=t}function u(t,e){this._cursor=t,this._request=e}function s(t){this._store=t}function c(n){this._tx=n,this.complete=new Promise(function(t,e){n.oncomplete=function(){t()},n.onerror=function(){e(n.error)},n.onabort=function(){e(n.error)}})}function l(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new c(n)}function f(t){this._db=t}t(i,"_index",["name","keyPath","multiEntry","unique"]),e(i,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(i,"_index",IDBIndex,["openCursor","openKeyCursor"]),t(u,"_cursor",["direction","key","primaryKey","value"]),e(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(u.prototype[n]=function(){var e=this,t=arguments;return Promise.resolve().then(function(){return e._cursor[n].apply(e._cursor,t),o(e._request).then(function(t){if(t)return new u(t,e._request)})})})}),s.prototype.createIndex=function(){return new i(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new i(this._store.index.apply(this._store,arguments))},t(s,"_store",["name","keyPath","indexNames","autoIncrement"]),e(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},t(c,"_tx",["objectStoreNames","mode"]),n(c,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},t(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},t(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(a){[s,i].forEach(function(t){a in t.prototype&&(t.prototype[a.replace("open","iterate")]=function(){var t,e=(t=arguments,Array.prototype.slice.call(t)),n=e[e.length-1],r=this._store||this._index,i=r[a].apply(r,e.slice(0,-1));i.onsuccess=function(){n(i.result)}})})}),[i,s].forEach(function(t){t.prototype.getAll||(t.prototype.getAll=function(t,n){var r=this,i=[];return new Promise(function(e){r.iterateCursor(t,function(t){t?(i.push(t.value),void 0===n||i.length!=n?t.continue():e(i)):e(i)})})})});var d={open:function(t,e,n){var r=a(indexedDB,"open",[t,e]),i=r.request;return i.onupgradeneeded=function(t){n&&n(new l(i.result,t.oldVersion,i.transaction))},r.then(function(t){return new f(t)})},delete:function(t){return a(indexedDB,"deleteDatabase",[t])}};void 0!==h?(h.exports=d,h.exports.default=h.exports):self.idb=d}()},{}],2:[function(t,e,n){var r=t("idb"),i="restaurants",a=function(){function a(){_classCallCheck(this,a)}return _createClass(a,null,[{key:"fetchRestaurants",value:function(){var e=this;return fetch(a.DATABASE_URL+"/restaurants").then(function(t){return t.json()}).then(function(t){return e.putRestaurantsIntoIndexedDb(t).then(function(){return t})}).catch(function(t){return a.fetchRestaurantsFromIndexedDb().then(function(t){if(t.length)return t;throw new Error("Fetch error")})})}},{key:"fetchRestaurantWithReviews",value:function(e){var i=this;return Promise.all([this.fetchRestaurant(e),this.fetchRestaurantReviews(e)]).then(function(t){var e=_slicedToArray(t,2),n=e[0],r=e[1];return n.reviews=r,i.putRestaurantIntoIndexedDb(n).then(function(){return n})}).catch(function(t){return a.fetchRestaurantFromIndexedDb(e).then(function(t){if(t)return t;throw new Error("Fetch error")})})}},{key:"fetchRestaurant",value:function(t){return fetch(a.DATABASE_URL+"/restaurants/"+t).then(function(t){return t.json()})}},{key:"fetchRestaurantReviews",value:function(t){return fetch(a.DATABASE_URL+"/reviews/?restaurant_id="+t).then(function(t){return t.json()})}},{key:"fetchRestaurantsFromIndexedDb",value:function(){return a.openDatabase().then(function(t){return t.transaction(i).objectStore(i).getAll()})}},{key:"fetchRestaurantFromIndexedDb",value:function(e){return a.openDatabase().then(function(t){return t.transaction(i).objectStore(i).get(+e)})}},{key:"putRestaurantsIntoIndexedDb",value:function(n){return a.clearRestaurantsInIndexedDb().then(function(){return a.openDatabase().then(function(t){var e=t.transaction(i,"readwrite");return n.forEach(function(t){return e.objectStore(i).put(t)}),e.complete})})}},{key:"putRestaurantIntoIndexedDb",value:function(n){return a.openDatabase().then(function(t){var e=t.transaction(i,"readwrite");return e.objectStore(i).put(n),e.complete})}},{key:"clearRestaurantsInIndexedDb",value:function(){return a.openDatabase().then(function(t){var e=t.transaction(i,"readwrite");return e.objectStore(i).clear(),e.complete})}},{key:"openDatabase",value:function(){return r.open("restaurants-db",1,function(t){switch(t.oldVersion){case 0:t.createObjectStore(i,{keyPath:"id"}).createIndex("status","status")}})}},{key:"fetchRestaurantById",value:function(t){return a.fetchRestaurantWithReviews(t)}},{key:"fetchRestaurantByCuisine",value:function(e,t){a.fetchRestaurants().then(function(t){return t.filter(function(t){return t.cuisine_type==e})})}},{key:"fetchRestaurantByNeighborhood",value:function(e){return a.fetchRestaurants().then(function(t){return t.filter(function(t){return t.neighborhood==e})})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(n,r){return a.fetchRestaurants().then(function(t){var e=t;return"all"!=n&&(e=e.filter(function(t){return t.cuisine_type==n})),"all"!=r&&(e=e.filter(function(t){return t.neighborhood==r})),e})}},{key:"saveReview",value:function(t){fetch(a.DATABASE_URL+"/reviews/",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(t){return t.json()}).catch(function(t){console.log("errr")})}},{key:"fetchNeighborhoodsAndCuisines",value:function(){return a.fetchRestaurants().then(function(n){var r=n.map(function(t,e){return n[e].neighborhood}),i=n.map(function(t,e){return n[e].cuisine_type});return{neighborhoods:r.filter(function(t,e){return r.indexOf(t)==e}),cuisines:i.filter(function(t,e){return i.indexOf(t)==e}),restaurants:n}})}},{key:"urlForRestaurant",value:function(t){return"./restaurant.html?id="+t.id}},{key:"imageUrlForRestaurant",value:function(t){return"/img/"+t.id+"_small.jpg"}},{key:"imageSrcSetForRestaurant",value:function(t){return"/img/"+t.photograph}},{key:"mapMarkerForRestaurant",value:function(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:a.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337"}}]),a}();e.exports=a},{idb:1}],3:[function(t,e,n){e.exports={registerServiceWorker:function(){}}},{}],4:[function(t,e,n){function r(t,e){if((e=e||{}).max=e.max||5,this.rating=document.querySelector(t),this.starList=[],this.rating){this.rating.setAttribute("aria-label",e.label),this.rating.setAttribute("tabindex","0"),this.rating.setAttribute("role","radiogroup"),this.rating.setAttribute("aria-valuenow",0),this.rating.setAttribute("aria-valuemin",0),this.rating.setAttribute("aria-valuemax",e.max),this.rating.className="rating-select";for(var n=1;n<=e.max;n++){var r=document.createElement("div");r.className="rating-select__item",r.setAttribute("role","radio"),r.setAttribute("aria-checked",!1),r.setAttribute("tabindex",0),r.setAttribute("data-value",n),this.starList.push(r),r.addEventListener("click",this.onRatingElementClick.bind(this)),this.rating.append(r)}this.rating.addEventListener("keydown",this.handleKeyDown.bind(this)),this.activeItemIdx=0,this.ratingInput=document.createElement("input"),this.ratingInput.setAttribute("value",0),this.ratingInput.setAttribute("name",e.inputName||"rating"),this.ratingInput.setAttribute("id",e.inputName||"rating"),this.ratingInput.setAttribute("type","hidden"),this.rating.append(this.ratingInput)}}r.prototype={onRatingElementClick:function(t){var n=this.starList.indexOf(t.target);if(-1!==!n){this.activeItemIdx=n,this.starList.map(function(t,e){t.classList.toggle("rating-select__item--checked",e<=n),e===n?(t.setAttribute("aria-checked",!0),t.setAttribute("tabindex",0)):(t.setAttribute("aria-checked",!1),t.setAttribute("tabindex",-1))});var e=t.target.getAttribute("data-value");this.rating.setAttribute("data-value",e),this.rating.setAttribute("aria-valuenow",e),this.ratingInput.setAttribute("value",e)}},handleKeyDown:function(t){var e=13,n=27,r=32,i=37,a=38,o=39,u=40;if(-1!==[u,a,r,e,i,o,n].indexOf(t.keyCode))switch(t.preventDefault(),t.keyCode){case u:case o:this.nextActiveListItem();break;case a:case i:this.previousActiveListItem();break;case r:case e:this.onRatingElementClick(t),this.rating.focus();break;case n:this.rating.focus()}},nextActiveListItem:function(){var t=this.activeItemIdx>=this.starList.length-1?0:this.activeItemIdx+1;this.starList[t].focus(),this.activeItemIdx=t},previousActiveListItem:function(){var t=0===this.activeItemIdx?this.starList.length-1:this.activeItemIdx-1;this.starList[t].focus(),this.activeItemIdx=t}},e.exports=r},{}],5:[function(t,e,n){var o=t("./dbhelper"),r=t("./process");new(t("./rating-select"))("#rating-select",{label:"Rating",max:5}),function(){var t=document.getElementById("send-rating-form");if(!t)return;t.onsubmit=function(t){t.preventDefault();var e=t.target.elements,n=e.name.value,r=e.rating.value,i=e.comments.value,a={restaurant_id:self.restaurant.id,name:n,rating:r,comments:i};o.saveReview(a)}}(),window.initMap=function(){r.registerServiceWorker(),function(){if(self.restaurant)return self.restaurant;var t=function(t,e){e||(e=window.location.href);t=t.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+t+"(=([^&#]*)|&|#|$)").exec(e);if(!n)return null;if(!n[2])return"";return decodeURIComponent(n[2].replace(/\+/g," "))}("id");{if(t)return o.fetchRestaurantById(t).then(function(t){if(!t)throw new Error("No restaurant");return t});throw new Error("No restaurant id in URL")}}().then(function(t){self.restaurant=t,function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,e=document.getElementById("restaurant-name");e.innerHTML=t.name,e.setAttribute("tabindex","0"),document.getElementById("restaurant-address").innerHTML=t.address;var n=document.getElementById("restaurant-img");n.className="restaurant-img",n.setAttribute("alt","An image from the restaurant "+t.name),n.src=o.imageUrlForRestaurant(t);var r=document.getElementById("restaurant-cuisine");r.setAttribute("tabindex","0"),r.innerHTML=t.cuisine_type,t.operating_hours&&function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours,e=document.getElementById("restaurant-hours");for(var n in t){var r=document.createElement("tr"),i=document.createElement("td");i.innerHTML=n,r.appendChild(i);var a=document.createElement("td");a.innerHTML=t[n],a.setAttribute("aria-label",t[n]+","),r.appendChild(a),e.appendChild(r)}}();!function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.reviews,e=document.getElementById("reviews-container");if(!t){var n=document.createElement("p");return n.innerHTML="No reviews yet!",e.appendChild(n)}var r=document.getElementById("reviews-list");t.forEach(function(t){r.appendChild(function(t){var e=document.createElement("li");e.setAttribute("tabindex","0"),e.className="reviews-list-item",e.setAttribute("aria-label","review");var n=document.createElement("div");n.className="reviewer-info";var r=document.createElement("div");r.className="reviewer-info__name-date";var i=document.createElement("h3");i.setAttribute("tabindex","0"),i.setAttribute("aria-label",t.name),i.innerHTML=t.name;var a=document.createElement("date");a.setAttribute("tabindex","0"),a.innerHTML=new Date(t.updatedAt).toDateString(),r.appendChild(i),r.appendChild(a),n.appendChild(r),n.appendChild(function(t){var e=document.createElement("p");e.appendChild((n=document.createElement("span"),n.className="rating-number",n.setAttribute("tabindex","0"),n.innerHTML="Rating : "+t,n));var n;var r="★".repeat(+t);+t<5&&(r+="☆".repeat(5-+t));var i=document.createElement("span");return i.className="rating-stars",i.innerHTML=r,e.appendChild(i),e}(t.rating)),e.appendChild(n);var o=document.createElement("p");return o.setAttribute("tabindex","0"),o.className="reviewer-comment",o.innerHTML=t.comments,e.appendChild(o),e}(t))}),e.appendChild(r)}()}(),self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,e=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=t.name,e.appendChild(n)}(),o.mapMarkerForRestaurant(self.restaurant,self.map)}).catch(function(t){console.error(t)})}},{"./dbhelper":2,"./process":3,"./rating-select":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
