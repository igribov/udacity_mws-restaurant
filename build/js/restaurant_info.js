"use strict";var _createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}!function a(i,u,c){function s(t,e){if(!u[t]){if(!i[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=u[t]={exports:{}};i[t][0].call(o.exports,function(e){return s(i[t][1][e]||e)},o,o.exports,a,i,u,c)}return u[t].exports}for(var l="function"==typeof require&&require,e=0;e<c.length;e++)s(c[e]);return s}({1:[function(e,p,t){!function(){function i(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function a(n,r,o){var a,e=new Promise(function(e,t){i(a=n[r].apply(n,o)).then(e,t)});return e.request=a,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return a(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=a(e,n,arguments)).then(function(e){if(e)return new u(e,t.request)});var e,t})})}function o(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function s(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new s(n)}function f(e){this._db=e}e(o,"_index",["name","keyPath","multiEntry","unique"]),t(o,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(o,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(u,"_cursor",["direction","key","primaryKey","value"]),t(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(u.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),i(t._request).then(function(e){if(e)return new u(e,t._request)})})})}),c.prototype.createIndex=function(){return new o(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new o(this._store.index.apply(this._store,arguments))},e(c,"_store",["name","keyPath","indexNames","autoIncrement"]),t(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(c,"_store",IDBObjectStore,["deleteIndex"]),s.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},e(s,"_tx",["objectStoreNames","mode"]),n(s,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new s(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(a){[c,o].forEach(function(e){a in e.prototype&&(e.prototype[a.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,o=r[a].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[o,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,o=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(o.push(e.value),void 0===n||o.length!=n?e.continue():t(o)):t(o)})})})});var d={open:function(e,t,n){var r=a(indexedDB,"open",[e,t]),o=r.request;return o.onupgradeneeded=function(e){n&&n(new l(o.result,e.oldVersion,o.transaction))},r.then(function(e){return new f(e)})},delete:function(e){return a(indexedDB,"deleteDatabase",[e])}};void 0!==p?(p.exports=d,p.exports.default=p.exports):self.idb=d}()},{}],2:[function(e,t,n){var r=e("idb"),a="restaurants",o=function(){function o(){_classCallCheck(this,o)}return _createClass(o,null,[{key:"fetchRestaurants",value:function(){var t=this;return fetch(o.DATABASE_URL+"/restaurants").then(function(e){return e.json()}).then(function(e){return t.putRestaurantsIntoIndexedDb(e).then(function(){return e})}).catch(function(e){return o.fetchRestaurantsFromIndexedDb().then(function(e){if(e.length)return e;throw new Error("Fetch error")})})}},{key:"fetchRestaurant",value:function(t){var n=this;return fetch(o.DATABASE_URL+"/restaurants/"+t).then(function(e){return e.json()}).then(function(e){return n.putRestaurantIntoIndexedDb(e).then(function(){return e})}).catch(function(e){return o.fetchRestaurantFromIndexedDb(t).then(function(e){if(e)return e;throw new Error("Fetch error")})})}},{key:"fetchRestaurantsFromIndexedDb",value:function(){return o.openDatabase().then(function(e){return e.transaction(a).objectStore(a).getAll()})}},{key:"fetchRestaurantFromIndexedDb",value:function(t){return o.openDatabase().then(function(e){return e.transaction(a).objectStore(a).get(+t)})}},{key:"putRestaurantsIntoIndexedDb",value:function(n){return o.clearRestaurantsInIndexedDb().then(function(){return o.openDatabase().then(function(e){var t=e.transaction(a,"readwrite");return n.forEach(function(e){return t.objectStore(a).put(e)}),t.complete})})}},{key:"putRestaurantIntoIndexedDb",value:function(n){return o.openDatabase().then(function(e){var t=e.transaction(a,"readwrite");return t.objectStore(a).put(n),t.complete})}},{key:"clearRestaurantsInIndexedDb",value:function(){return o.openDatabase().then(function(e){var t=e.transaction(a,"readwrite");return t.objectStore(a).clear(),t.complete})}},{key:"openDatabase",value:function(){return r.open("restaurants-db",1,function(e){switch(e.oldVersion){case 0:e.createObjectStore(a,{keyPath:"id"}).createIndex("status","status")}})}},{key:"fetchRestaurantById",value:function(e){return o.fetchRestaurant(e).then(function(e){return e})}},{key:"fetchRestaurantByCuisine",value:function(t,e){o.fetchRestaurants().then(function(e){return e.filter(function(e){return e.cuisine_type==t})})}},{key:"fetchRestaurantByNeighborhood",value:function(t){return o.fetchRestaurants().then(function(e){return e.filter(function(e){return e.neighborhood==t})})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(n,r){return o.fetchRestaurants().then(function(e){var t=e;return"all"!=n&&(t=t.filter(function(e){return e.cuisine_type==n})),"all"!=r&&(t=t.filter(function(e){return e.neighborhood==r})),t})}},{key:"fetchNeighborhoods",value:function(){return o.fetchRestaurants().then(function(n){var r=n.map(function(e,t){return n[t].neighborhood});return r.filter(function(e,t){return r.indexOf(e)==t})})}},{key:"fetchCuisines",value:function(){return o.fetchRestaurants().then(function(n){var r=n.map(function(e,t){return n[t].cuisine_type});return r.filter(function(e,t){return r.indexOf(e)==t})})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.id+"_medium.jpg"}},{key:"imageSrcSetForRestaurant",value:function(e){return"/img/"+e.photograph}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:o.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337"}}]),o}();t.exports=o},{idb:1}],3:[function(e,t,n){function r(e){e?e.addEventListener("statechange",function(){console.log("ServiceWorker state was changed to "+e.state),"installed"===e.state&&(console.log("Service worker installed and waiting for activation",e),o(e))}):console.log("Worker not defined!")}function o(e){var r,o;(r={action:"skipWaiting"},o=e,new Promise(function(t,n){var e=new MessageChannel;e.port1.onmessage=function(e){e.data.error?n(e.data.error):t(e.data)},o.postMessage(r,[e.port2])})).then(function(e){console.log(e)})}t.exports={registerServiceWorker:function(){if(!1 in navigator)throw new Error("serviceWorker not register");navigator.serviceWorker.register("/sw.js").then(function(e){var t;navigator.serviceWorker.controller&&(e.active&&console.log("There is an an active service worker"),e.waiting&&(console.log("waiting :",e.waiting),console.log("service worker is waiting"),o(e.waiting)),e.installing&&(console.log("installing : ",e),console.log("service worker status is installing"),r(e.installing)),e.addEventListener("updatefound",function(){console.log("service worker update found",e),r(e.installing)}),navigator.serviceWorker.addEventListener("controllerchange",function(){t||setTimeout(function(){window.location.reload(),t=!0},1e3)}))}).catch(function(e){console.log("Registration failed with "+e)})}}},{}],4:[function(e,t,n){var o=e("./dbhelper"),r=e("./process");window.initMap=function(){r.registerServiceWorker(),function(){if(self.restaurant)return self.restaurant;var e=function(e,t){t||(t=window.location.href);e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);if(!n)return null;if(!n[2])return"";return decodeURIComponent(n[2].replace(/\+/g," "))}("id");{if(e)return o.fetchRestaurantById(e).then(function(e){if(!(self.restaurant=e))throw new Error("No restaurant");return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,t=document.getElementById("restaurant-name");t.innerHTML=e.name,t.setAttribute("tabindex","0"),document.getElementById("restaurant-address").innerHTML=e.address;var n=document.getElementById("restaurant-img");n.className="restaurant-img",n.setAttribute("alt","An image from the restaurant "+e.name),n.src=o.imageUrlForRestaurant(e);var r=document.getElementById("restaurant-cuisine");r.setAttribute("tabindex","0"),r.innerHTML=e.cuisine_type,e.operating_hours&&function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours,t=document.getElementById("restaurant-hours");for(var n in e){var r=document.createElement("tr"),o=document.createElement("td");o.innerHTML=n,r.appendChild(o);var a=document.createElement("td");a.innerHTML=e[n],a.setAttribute("aria-label",e[n]+","),r.appendChild(a),t.appendChild(r)}}();!function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.reviews,t=document.getElementById("reviews-container");if(!e){var n=document.createElement("p");return n.innerHTML="No reviews yet!",t.appendChild(n)}var r=document.getElementById("reviews-list");e.forEach(function(e){r.appendChild(function(e){var t=document.createElement("li");t.setAttribute("tabindex","0"),t.className="reviews-list-item",t.setAttribute("aria-label","review");var n=document.createElement("div");n.className="reviewer-info";var r=document.createElement("div");r.className="reviewer-info__name-date";var o=document.createElement("h3");o.setAttribute("tabindex","0"),o.setAttribute("aria-label",e.name),o.innerHTML=e.name;var a=document.createElement("date");a.setAttribute("tabindex","0"),a.innerHTML=e.date,r.appendChild(o),r.appendChild(a),n.appendChild(r),n.appendChild(function(e){var t=document.createElement("p");t.appendChild((n=document.createElement("span"),n.className="rating-number",n.setAttribute("tabindex","0"),n.innerHTML="Rating : "+e,n));var n;var r="★".repeat(+e);+e<5&&(r+="☆".repeat(5-+e));var o=document.createElement("span");return o.className="rating-stars",o.innerHTML=r,t.appendChild(o),t}(e.rating)),t.appendChild(n);var i=document.createElement("p");return i.setAttribute("tabindex","0"),i.className="reviewer-comment",i.innerHTML=e.comments,t.appendChild(i),t}(e))}),t.appendChild(r)}()}(),e});throw new Error("No restaurant id in URL")}}().then(function(e){self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:e.latlng,scrollwheel:!1}),function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}(),o.mapMarkerForRestaurant(self.restaurant,self.map)}).catch(function(e){console.error(e)})}},{"./dbhelper":2,"./process":3}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
