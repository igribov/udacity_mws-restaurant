"use strict";var _slicedToArray=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,a=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},_createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}!function a(o,s,u){function c(t,e){if(!s[t]){if(!o[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var i=s[t]={exports:{}};o[t][0].call(i.exports,function(e){return c(o[t][1][e]||e)},i,i.exports,a,o,s,u)}return s[t].exports}for(var l="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,h,t){!function(){function o(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function a(n,r,i){var a,e=new Promise(function(e,t){o(a=n[r].apply(n,i)).then(e,t)});return e.request=a,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return a(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=a(e,n,arguments)).then(function(e){if(e)return new s(e,t.request)});var e,t})})}function i(e){this._index=e}function s(e,t){this._cursor=e,this._request=t}function u(e){this._store=e}function c(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new c(n)}function d(e){this._db=e}e(i,"_index",["name","keyPath","multiEntry","unique"]),t(i,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(i,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(s,"_cursor",["direction","key","primaryKey","value"]),t(s,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(s.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),o(t._request).then(function(e){if(e)return new s(e,t._request)})})})}),u.prototype.createIndex=function(){return new i(this._store.createIndex.apply(this._store,arguments))},u.prototype.index=function(){return new i(this._store.index.apply(this._store,arguments))},e(u,"_store",["name","keyPath","indexNames","autoIncrement"]),t(u,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(u,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(u,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new u(this._tx.objectStore.apply(this._tx,arguments))},e(c,"_tx",["objectStoreNames","mode"]),n(c,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new u(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},e(d,"_db",["name","version","objectStoreNames"]),n(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(a){[u,i].forEach(function(e){a in e.prototype&&(e.prototype[a.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,i=r[a].apply(r,t.slice(0,-1));i.onsuccess=function(){n(i.result)}})})}),[i,u].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,i=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(i.push(e.value),void 0===n||i.length!=n?e.continue():t(i)):t(i)})})})});var f={open:function(e,t,n){var r=a(indexedDB,"open",[e,t]),i=r.request;return i.onupgradeneeded=function(e){n&&n(new l(i.result,e.oldVersion,i.transaction))},r.then(function(e){return new d(e)})},delete:function(e){return a(indexedDB,"deleteDatabase",[e])}};void 0!==h?(h.exports=f,h.exports.default=h.exports):self.idb=f}()},{}],2:[function(e,t,n){var r=e("idb"),i="restaurants",a=function(){function a(){_classCallCheck(this,a)}return _createClass(a,null,[{key:"fetchRestaurants",value:function(){var t=this;return fetch(a.DATABASE_URL+"/restaurants").then(function(e){return e.json()}).then(function(e){return t.putRestaurantsIntoIndexedDb(e).then(function(){return e})}).catch(function(e){return a.fetchRestaurantsFromIndexedDb().then(function(e){if(e.length)return e;throw new Error("Fetch error")})})}},{key:"fetchRestaurantWithReviews",value:function(t){var i=this;return Promise.all([this.fetchRestaurant(t),this.fetchRestaurantReviews(t)]).then(function(e){var t=_slicedToArray(e,2),n=t[0],r=t[1];return n.reviews=r,i.putRestaurantIntoIndexedDb(n).then(function(){return n})}).catch(function(e){return a.fetchRestaurantFromIndexedDb(t).then(function(e){if(e)return e;throw new Error("Fetch error")})})}},{key:"fetchRestaurant",value:function(e){return fetch(a.DATABASE_URL+"/restaurants/"+e).then(function(e){return e.json()})}},{key:"fetchRestaurantReviews",value:function(e){return fetch(a.DATABASE_URL+"/reviews/?restaurant_id="+e).then(function(e){return e.json()})}},{key:"fetchRestaurantsFromIndexedDb",value:function(){return a.openDatabase().then(function(e){return e.transaction(i).objectStore(i).getAll()})}},{key:"fetchRestaurantFromIndexedDb",value:function(t){return a.openDatabase().then(function(e){return e.transaction(i).objectStore(i).get(+t)})}},{key:"putRestaurantsIntoIndexedDb",value:function(n){return a.clearRestaurantsInIndexedDb().then(function(){return a.openDatabase().then(function(e){var t=e.transaction(i,"readwrite");return n.forEach(function(e){return t.objectStore(i).put(e)}),t.complete})})}},{key:"putRestaurantIntoIndexedDb",value:function(n){return a.openDatabase().then(function(e){var t=e.transaction(i,"readwrite");return t.objectStore(i).put(n),t.complete})}},{key:"clearRestaurantsInIndexedDb",value:function(){return a.openDatabase().then(function(e){var t=e.transaction(i,"readwrite");return t.objectStore(i).clear(),t.complete})}},{key:"openDatabase",value:function(){return r.open("restaurants-db",1,function(e){switch(e.oldVersion){case 0:e.createObjectStore(i,{keyPath:"id"}).createIndex("status","status")}})}},{key:"fetchRestaurantById",value:function(e){return a.fetchRestaurantWithReviews(e)}},{key:"fetchRestaurantByCuisine",value:function(t,e){a.fetchRestaurants().then(function(e){return e.filter(function(e){return e.cuisine_type==t})})}},{key:"fetchRestaurantByNeighborhood",value:function(t){return a.fetchRestaurants().then(function(e){return e.filter(function(e){return e.neighborhood==t})})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(n,r){return a.fetchRestaurants().then(function(e){var t=e;return"all"!=n&&(t=t.filter(function(e){return e.cuisine_type==n})),"all"!=r&&(t=t.filter(function(e){return e.neighborhood==r})),t})}},{key:"fetchNeighborhoodsAndCuisines",value:function(){return a.fetchRestaurants().then(function(n){var r=n.map(function(e,t){return n[t].neighborhood}),i=n.map(function(e,t){return n[t].cuisine_type});return{neighborhoods:r.filter(function(e,t){return r.indexOf(e)==t}),cuisines:i.filter(function(e,t){return i.indexOf(e)==t}),restaurants:n}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"small";return"/img/"+e.id+"_"+t+".jpg"}},{key:"imageSrcSetForRestaurant",value:function(e){return"/img/"+e.photograph}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:a.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337"}}]),a}();t.exports=a},{idb:1}],3:[function(e,t,n){function r(e){e?e.addEventListener("statechange",function(){console.log("ServiceWorker state was changed to "+e.state),"installed"===e.state&&(console.log("Service worker installed and waiting for activation",e),i(e))}):console.log("Worker not defined!")}function i(e){var r,i;(r={action:"skipWaiting"},i=e,new Promise(function(t,n){var e=new MessageChannel;e.port1.onmessage=function(e){e.data.error?n(e.data.error):t(e.data)},i.postMessage(r,[e.port2])})).then(function(e){console.log(e)})}t.exports={registerServiceWorker:function(){if(!1 in navigator)throw new Error("serviceWorker not register");navigator.serviceWorker.register("/sw.js").then(function(e){var t;navigator.serviceWorker.controller&&(e.active&&console.log("There is an active service worker"),e.waiting&&(console.log("waiting :",e.waiting),console.log("service worker is waiting"),i(e.waiting)),e.installing&&(console.log("installing : ",e),console.log("service worker status is installing"),r(e.installing)),e.addEventListener("updatefound",function(){console.log("service worker update found",e),r(e.installing)}),navigator.serviceWorker.addEventListener("controllerchange",function(){t||setTimeout(function(){window.location.reload(),t=!0},1e3)}))}).catch(function(e){console.log("Registration failed with "+e)})}}},{}],4:[function(e,t,n){function r(e,t){if((t=t||{}).max=t.max||5,this.rating=document.querySelector(e),this.starList=[],this.rating){this.rating.setAttribute("aria-label",t.label),this.rating.setAttribute("tabindex","0"),this.rating.setAttribute("role","radiogroup"),this.rating.className="rating-select";for(var n=1;n<=t.max;n++){var r=document.createElement("div");r.className="rating-select__item",r.setAttribute("role","radio"),r.setAttribute("aria-checked",!1),r.setAttribute("tabindex",0),r.setAttribute("data-value",n),this.starList.push(r),r.addEventListener("click",this.onRatingElementClick.bind(this)),this.rating.append(r)}this.rating.addEventListener("keydown",this.handleKeyDown.bind(this)),this.activeItemIdx=0,this.ratingInput=document.createElement("input"),this.ratingInput.setAttribute("value",0),this.ratingInput.setAttribute("name",t.inputName||"rating"),this.ratingInput.setAttribute("id",t.inputName||"rating"),this.ratingInput.setAttribute("type","hidden"),this.rating.append(this.ratingInput)}}r.prototype={reset:function(){this.rating.setAttribute("aria-valuenow",0),this.ratingInput.setAttribute("value",0),this.activeItemIdx=0,this.starList.forEach(function(e){e.classList.remove("rating-select__item--checked"),e.setAttribute("aria-checked",!1),e.setAttribute("tabindex",-1)}),this.starList[0].setAttribute("tabindex",0)},onRatingElementClick:function(e){var n=this.starList.indexOf(e.target);if(-1!==!n){this.activeItemIdx=n,this.starList.map(function(e,t){e.classList.toggle("rating-select__item--checked",t<=n),t===n?(e.setAttribute("aria-checked",!0),e.setAttribute("tabindex",0)):(e.setAttribute("aria-checked",!1),e.setAttribute("tabindex",-1))});var t=e.target.getAttribute("data-value");this.rating.setAttribute("data-value",t),this.rating.setAttribute("aria-valuenow",t),this.ratingInput.setAttribute("value",t)}},handleKeyDown:function(e){var t=13,n=27,r=32,i=37,a=38,o=39,s=40;if(-1!==[s,a,r,t,i,o,n].indexOf(e.keyCode))switch(e.preventDefault(),e.keyCode){case s:case o:this.nextActiveListItem();break;case a:case i:this.previousActiveListItem();break;case r:case t:this.onRatingElementClick(e),this.rating.focus();break;case n:this.rating.focus()}},nextActiveListItem:function(){var e=this.activeItemIdx>=this.starList.length-1?0:this.activeItemIdx+1;this.starList[e].focus(),this.activeItemIdx=e},previousActiveListItem:function(){var e=0===this.activeItemIdx?this.starList.length-1:this.activeItemIdx-1;this.starList[e].focus(),this.activeItemIdx=e}},t.exports=r},{}],5:[function(e,t,n){var r,i=e("./dbhelper"),a=e("./task-service"),o=e("./process"),s=e("./rating-select"),m=new a,u=document.getElementById("server-status-bar");function g(){if(!(0<arguments.length&&void 0!==arguments[0]&&arguments[0])&&self.restaurant)return self.restaurant;var e=function(e,t){t||(t=window.location.href);e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);if(!n)return null;if(!n[2])return"";return decodeURIComponent(n[2].replace(/\+/g," "))}("id");if(e)return i.fetchRestaurantById(e).then(function(e){if(!e)throw new Error("No restaurant");return e});throw new Error("No restaurant id in URL")}function b(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.reviews,t=document.getElementById("reviews-container"),n=document.getElementById("reviews-list");if(!e){var r=document.createElement("p");return r.innerHTML="No reviews yet!",void t.appendChild(r)}e.forEach(function(e){n.appendChild(y(e))})}function y(e){var t=document.createElement("li");t.setAttribute("tabindex","0"),t.className="reviews-list-item",t.setAttribute("aria-label","review");var n=document.createElement("div");n.className="reviewer-info";var r=document.createElement("div");r.className="reviewer-info__name-date";var i=document.createElement("h3");i.setAttribute("tabindex","0"),i.setAttribute("aria-label",e.name),i.innerHTML=e.name;var a=document.createElement("date");a.setAttribute("tabindex","0"),a.innerHTML=new Date(e.updatedAt).toDateString(),r.appendChild(i),r.appendChild(a),n.appendChild(r),n.appendChild(function(e){var t=document.createElement("p");t.appendChild((n=document.createElement("span"),n.className="rating-number",n.setAttribute("tabindex","0"),n.innerHTML="Rating : "+e,n));var n;var r="★".repeat(+e);+e<5&&(r+="☆".repeat(5-+e));var i=document.createElement("span");return i.className="rating-stars",i.innerHTML=r,t.appendChild(i),t}(e.rating)),t.appendChild(n);var o=document.createElement("p");return o.setAttribute("tabindex","0"),o.className="reviewer-comment",o.innerHTML=e.comments,t.appendChild(o),t}o.registerServiceWorker(),document.addEventListener("serverstatus",function(e){u.classList.toggle("-online",e.detail.online)},!1),function(){var p=document.getElementById("send-rating-form");if(!p)return;var v=new s("#rating-select",{label:"Rating",max:5});p.onsubmit=function(e){e.preventDefault();var t=e.target.elements,n=t.name.value,r=t.rating.value,i=t.comments.value;Array.prototype.map.call(document.querySelectorAll("#send-rating-form .form-group"),function(e){return e.classList.remove("has-error")});var a=!0;if(!n.trim()){var o=document.querySelector('[data-field="name"]');o.parentElement.classList.add("has-error"),o.innerHTML="Enter your name",a=!1}if(r<=0){var s=document.querySelector('[data-field="rating"]');s.parentElement.classList.add("has-error"),s.innerHTML="Set rating",a=!1}if(!i.trim()){var u=document.querySelector('[data-field="comments"]');u.parentElement.classList.add("has-error"),u.innerHTML="Enter comment",a=!1}if(a){var c,l,d,f=(new Date).getTime(),h={restaurant_id:self.restaurant.id,name:n,rating:r,comments:i,createdAt:f,updatedAt:f};c=h,l=document.getElementById("reviews-list"),(d=y(c)).classList.add("-added"),l.appendChild(d),m.saveReview(c,function(){g(!0).then(function(e){self.restaurant=e,Array.prototype.forEach.call(document.querySelectorAll(".reviews-list-item"),function(e){return e.remove()}),b()})}),p.reset(),v.reset()}}}(),window.initMap=function(){console.log("initMap"),setTimeout(function(){r=new google.maps.Map(document.getElementById("map"),{zoom:16,center:self.restaurant.latlng,scrollwheel:!1})},200)},g().then(function(t){if(console.log("restaurant -> ",t),void 0===t.is_favorite)try{t.is_favorite=JSON.parse(t.is_favorite)}catch(e){t.is_favorite=!1}self.restaurant=t,function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,t=document.getElementById("restaurant-name");t.innerHTML=e.name,t.setAttribute("tabindex","0"),document.getElementById("restaurant-address").innerHTML=e.address;var n=document.getElementById("restaurant-img");n.className="restaurant-img",n.setAttribute("alt","An image from the restaurant "+e.name),n.src=i.imageUrlForRestaurant(e);var r=document.getElementById("restaurant-cuisine");r.setAttribute("tabindex","0"),r.innerHTML=e.cuisine_type,e.operating_hours&&function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours,t=document.getElementById("restaurant-hours");for(var n in e){var r=document.createElement("tr"),i=document.createElement("td");i.innerHTML=n,r.appendChild(i);var a=document.createElement("td");a.innerHTML=e[n],a.setAttribute("aria-label",e[n]+","),r.appendChild(a),t.appendChild(r)}}();b()}(),function(){var e=document.getElementById("restaurant-like");console.log("addFavoriteButton--:",self.restaurant.is_favorite),self.restaurant.is_favorite&&e.classList.add("card-like--liked");e.onclick=function(){var e=this;this.setAttribute("disabled","disabled"),console.log(self.restaurant.is_favorite),this.classList.toggle("card-like--liked"),m.toggleFavorite(self.restaurant,function(){e.removeAttribute("disabled"),g(!0)})}}(),function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}(),i.mapMarkerForRestaurant(self.restaurant,r)}).catch(function(e){console.error(e)})},{"./dbhelper":2,"./process":3,"./rating-select":4,"./task-service":6}],6:[function(e,t,n){e("./dbhelper");function r(){var s=this;this.worker=new Worker("task-worker.js"),this.jobId=0,this.worker.onmessage=function(e){var t=e.data,n=t.id,r=void 0===n?0:n,i=t.action,a=t.result;switch(i){case"offline":case"online":var o=new CustomEvent("serverstatus",{detail:{online:"online"===i}});document.dispatchEvent(o);break;default:s.workerCallbacks[r]&&(s.workerCallbacks[r](a),delete s.workerCallbacks[r])}},this.workerCallbacks={onReviewSave:[]}}r.prototype={beforeTaskAdd:function(){this.jobId=this.jobId+1},addCallback:function(e){"function"==typeof e&&(this.workerCallbacks[this.jobId]=e)},saveReview:function(e,t){this.beforeTaskAdd(),this.worker.postMessage({id:this.jobId,action:"save_review",payload:e}),this.addCallback(t)},toggleFavorite:function(e,t){this.beforeTaskAdd(),this.worker.postMessage({id:this.jobId,action:"set_favorite",payload:{id:this.jobId,restaurantId:e.id,isFavorite:!JSON.parse(self.restaurant.is_favorite)}}),this.addCallback(t)}},t.exports=r},{"./dbhelper":2}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
