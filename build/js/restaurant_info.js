"use strict";var _slicedToArray=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(a)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},_createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}!function o(i,u,c){function s(t,e){if(!u[t]){if(!i[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var a=u[t]={exports:{}};i[t][0].call(a.exports,function(e){return s(i[t][1][e]||e)},a,a.exports,o,i,u,c)}return u[t].exports}for(var l="function"==typeof require&&require,e=0;e<c.length;e++)s(c[e]);return s}({1:[function(e,h,t){!function(){function i(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function o(n,r,a){var o,e=new Promise(function(e,t){i(o=n[r].apply(n,a)).then(e,t)});return e.request=o,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return o(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=o(e,n,arguments)).then(function(e){if(e)return new u(e,t.request)});var e,t})})}function a(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function s(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new s(n)}function f(e){this._db=e}e(a,"_index",["name","keyPath","multiEntry","unique"]),t(a,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(a,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(u,"_cursor",["direction","key","primaryKey","value"]),t(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(u.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),i(t._request).then(function(e){if(e)return new u(e,t._request)})})})}),c.prototype.createIndex=function(){return new a(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new a(this._store.index.apply(this._store,arguments))},e(c,"_store",["name","keyPath","indexNames","autoIncrement"]),t(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(c,"_store",IDBObjectStore,["deleteIndex"]),s.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},e(s,"_tx",["objectStoreNames","mode"]),n(s,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new s(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(o){[c,a].forEach(function(e){o in e.prototype&&(e.prototype[o.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,a=r[o].apply(r,t.slice(0,-1));a.onsuccess=function(){n(a.result)}})})}),[a,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,a=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(a.push(e.value),void 0===n||a.length!=n?e.continue():t(a)):t(a)})})})});var d={open:function(e,t,n){var r=o(indexedDB,"open",[e,t]),a=r.request;return a.onupgradeneeded=function(e){n&&n(new l(a.result,e.oldVersion,a.transaction))},r.then(function(e){return new f(e)})},delete:function(e){return o(indexedDB,"deleteDatabase",[e])}};void 0!==h?(h.exports=d,h.exports.default=h.exports):self.idb=d}()},{}],2:[function(e,t,n){var r=e("idb"),a="restaurants",o=function(){function o(){_classCallCheck(this,o)}return _createClass(o,null,[{key:"fetchRestaurants",value:function(){var t=this;return fetch(o.DATABASE_URL+"/restaurants").then(function(e){return e.json()}).then(function(e){return t.putRestaurantsIntoIndexedDb(e).then(function(){return e})}).catch(function(e){return o.fetchRestaurantsFromIndexedDb().then(function(e){if(e.length)return e;throw new Error("Fetch error")})})}},{key:"fetchRestaurantWithReviews",value:function(t){var a=this;return Promise.all([this.fetchRestaurant(t),this.fetchRestaurantReviews(t)]).then(function(e){var t=_slicedToArray(e,2),n=t[0],r=t[1];return n.reviews=r,a.putRestaurantIntoIndexedDb(n).then(function(){return n})}).catch(function(e){return o.fetchRestaurantFromIndexedDb(t).then(function(e){if(e)return e;throw new Error("Fetch error")})})}},{key:"fetchRestaurant",value:function(e){return fetch(o.DATABASE_URL+"/restaurants/"+e).then(function(e){return e.json()})}},{key:"fetchRestaurantReviews",value:function(e){return fetch(o.DATABASE_URL+"/reviews/?restaurant_id="+e).then(function(e){return e.json()})}},{key:"fetchRestaurantsFromIndexedDb",value:function(){return o.openDatabase().then(function(e){return e.transaction(a).objectStore(a).getAll()})}},{key:"fetchRestaurantFromIndexedDb",value:function(t){return o.openDatabase().then(function(e){return e.transaction(a).objectStore(a).get(+t)})}},{key:"putRestaurantsIntoIndexedDb",value:function(n){return o.clearRestaurantsInIndexedDb().then(function(){return o.openDatabase().then(function(e){var t=e.transaction(a,"readwrite");return n.forEach(function(e){return t.objectStore(a).put(e)}),t.complete})})}},{key:"putRestaurantIntoIndexedDb",value:function(n){return o.openDatabase().then(function(e){var t=e.transaction(a,"readwrite");return t.objectStore(a).put(n),t.complete})}},{key:"clearRestaurantsInIndexedDb",value:function(){return o.openDatabase().then(function(e){var t=e.transaction(a,"readwrite");return t.objectStore(a).clear(),t.complete})}},{key:"openDatabase",value:function(){return r.open("restaurants-db",1,function(e){switch(e.oldVersion){case 0:e.createObjectStore(a,{keyPath:"id"}).createIndex("status","status")}})}},{key:"fetchRestaurantById",value:function(e){return o.fetchRestaurantWithReviews(e)}},{key:"fetchRestaurantByCuisine",value:function(t,e){o.fetchRestaurants().then(function(e){return e.filter(function(e){return e.cuisine_type==t})})}},{key:"fetchRestaurantByNeighborhood",value:function(t){return o.fetchRestaurants().then(function(e){return e.filter(function(e){return e.neighborhood==t})})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(n,r){return o.fetchRestaurants().then(function(e){var t=e;return"all"!=n&&(t=t.filter(function(e){return e.cuisine_type==n})),"all"!=r&&(t=t.filter(function(e){return e.neighborhood==r})),t})}},{key:"fetchNeighborhoodsAndCuisines",value:function(){return o.fetchRestaurants().then(function(n){var r=n.map(function(e,t){return n[t].neighborhood}),a=n.map(function(e,t){return n[t].cuisine_type});return{neighborhoods:r.filter(function(e,t){return r.indexOf(e)==t}),cuisines:a.filter(function(e,t){return a.indexOf(e)==t}),restaurants:n}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.id+"_small.jpg"}},{key:"imageSrcSetForRestaurant",value:function(e){return"/img/"+e.photograph}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:o.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337"}}]),o}();t.exports=o},{idb:1}],3:[function(e,t,n){t.exports={registerServiceWorker:function(){}}},{}],4:[function(e,t,n){t.exports=function(e){var t=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(this.rating=document.querySelector(e),this.starList=[],this.rating){this.rating.setAttribute("aria-label",n.label),this.rating.setAttribute("tabindex","0"),this.rating.setAttribute("role","radiogroup"),this.rating.className="rating-select";for(var r=function(e){var r=document.createElement("div");r.className="rating-select__item",r.setAttribute("role","radio"),r.setAttribute("aria-checked",!1),r.setAttribute("tabindex",0),t.starList.push(r),r.addEventListener("click",function(e){var n=t.starList.indexOf(e.target);t.starList.map(function(e,t){e.classList.toggle("rating-select__item--checked",t<=n),t===n?(e.setAttribute("aria-checked",!0),r.setAttribute("tabindex",0)):(e.setAttribute("aria-checked",!1),r.setAttribute("tabindex",-1))})}),t.rating.append(r)},a=1;a<=n.max;a++)r()}}},{}],5:[function(e,t,n){var a=e("./dbhelper"),r=e("./process");new(e("./rating-select"))("#rating-select",{label:"Rating",max:5}),window.initMap=function(){r.registerServiceWorker(),function(){if(self.restaurant)return self.restaurant;var e=function(e,t){t||(t=window.location.href);e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);if(!n)return null;if(!n[2])return"";return decodeURIComponent(n[2].replace(/\+/g," "))}("id");{if(e)return a.fetchRestaurantById(e).then(function(e){if(!e)throw new Error("No restaurant");return e});throw new Error("No restaurant id in URL")}}().then(function(e){self.restaurant=e,function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,t=document.getElementById("restaurant-name");t.innerHTML=e.name,t.setAttribute("tabindex","0"),document.getElementById("restaurant-address").innerHTML=e.address;var n=document.getElementById("restaurant-img");n.className="restaurant-img",n.setAttribute("alt","An image from the restaurant "+e.name),n.src=a.imageUrlForRestaurant(e);var r=document.getElementById("restaurant-cuisine");r.setAttribute("tabindex","0"),r.innerHTML=e.cuisine_type,e.operating_hours&&function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours,t=document.getElementById("restaurant-hours");for(var n in e){var r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);var o=document.createElement("td");o.innerHTML=e[n],o.setAttribute("aria-label",e[n]+","),r.appendChild(o),t.appendChild(r)}}();!function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.reviews,t=document.getElementById("reviews-container");if(!e){var n=document.createElement("p");return n.innerHTML="No reviews yet!",t.appendChild(n)}var r=document.getElementById("reviews-list");e.forEach(function(e){r.appendChild(function(e){var t=document.createElement("li");t.setAttribute("tabindex","0"),t.className="reviews-list-item",t.setAttribute("aria-label","review");var n=document.createElement("div");n.className="reviewer-info";var r=document.createElement("div");r.className="reviewer-info__name-date";var a=document.createElement("h3");a.setAttribute("tabindex","0"),a.setAttribute("aria-label",e.name),a.innerHTML=e.name;var o=document.createElement("date");o.setAttribute("tabindex","0"),o.innerHTML=new Date(e.updatedAt).toDateString(),r.appendChild(a),r.appendChild(o),n.appendChild(r),n.appendChild(function(e){var t=document.createElement("p");t.appendChild((n=document.createElement("span"),n.className="rating-number",n.setAttribute("tabindex","0"),n.innerHTML="Rating : "+e,n));var n;var r="★".repeat(+e);+e<5&&(r+="☆".repeat(5-+e));var a=document.createElement("span");return a.className="rating-stars",a.innerHTML=r,t.appendChild(a),t}(e.rating)),t.appendChild(n);var i=document.createElement("p");return i.setAttribute("tabindex","0"),i.className="reviewer-comment",i.innerHTML=e.comments,t.appendChild(i),t}(e))}),t.appendChild(r)}()}(),self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:e.latlng,scrollwheel:!1}),function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}(),a.mapMarkerForRestaurant(self.restaurant,self.map)}).catch(function(e){console.error(e)})}},{"./dbhelper":2,"./process":3,"./rating-select":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
