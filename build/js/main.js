"use strict";var _slicedToArray=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},_createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}!function o(a,s,c){function u(t,e){if(!s[t]){if(!a[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var i=s[t]={exports:{}};a[t][0].call(i.exports,function(e){return u(a[t][1][e]||e)},i,i.exports,o,a,s,c)}return s[t].exports}for(var l="function"==typeof require&&require,e=0;e<c.length;e++)u(c[e]);return u}({1:[function(e,f,t){!function(){function a(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function o(n,r,i){var o,e=new Promise(function(e,t){a(o=n[r].apply(n,i)).then(e,t)});return e.request=o,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return o(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=o(e,n,arguments)).then(function(e){if(e)return new s(e,t.request)});var e,t})})}function i(e){this._index=e}function s(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function u(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new u(n)}function d(e){this._db=e}e(i,"_index",["name","keyPath","multiEntry","unique"]),t(i,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(i,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(s,"_cursor",["direction","key","primaryKey","value"]),t(s,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(s.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),a(t._request).then(function(e){if(e)return new s(e,t._request)})})})}),c.prototype.createIndex=function(){return new i(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new i(this._store.index.apply(this._store,arguments))},e(c,"_store",["name","keyPath","indexNames","autoIncrement"]),t(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(c,"_store",IDBObjectStore,["deleteIndex"]),u.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},e(u,"_tx",["objectStoreNames","mode"]),n(u,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new u(this._db.transaction.apply(this._db,arguments))},e(d,"_db",["name","version","objectStoreNames"]),n(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(o){[c,i].forEach(function(e){o in e.prototype&&(e.prototype[o.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,i=r[o].apply(r,t.slice(0,-1));i.onsuccess=function(){n(i.result)}})})}),[i,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,i=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(i.push(e.value),void 0===n||i.length!=n?e.continue():t(i)):t(i)})})})});var h={open:function(e,t,n){var r=o(indexedDB,"open",[e,t]),i=r.request;return i.onupgradeneeded=function(e){n&&n(new l(i.result,e.oldVersion,i.transaction))},r.then(function(e){return new d(e)})},delete:function(e){return o(indexedDB,"deleteDatabase",[e])}};void 0!==f?(f.exports=h,f.exports.default=f.exports):self.idb=h}()},{}],2:[function(e,t,n){function r(e){var r=this,i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(this.select=document.querySelector(e),this.select.setAttribute("aria-label",i.label),this.select.setAttribute("tabindex","0"),this.select.setAttribute("role","listbox"),this.select){this.onChange=i.onChange||function(){};var t=document.createElement("span");t.className="custom-select__dropdown",this.selectedValueBlock=document.createElement("span"),this.selectedValueBlock.className="custom-select__selected-item-value",this.selectedValueBlock.setAttribute("data-value",i.initialValue.value),this.selectedValueBlock.innerText=i.initialValue.name||"",t.append(this.selectedValueBlock);var n=document.createElement("span");n.className="custom-select__dropdown-button",n.setAttribute("role","button"),n.setAttribute("aria-label","open dropdown list"),t.append(n),this.select.append(t),this.itemsList=document.createElement("ul"),this.itemsList.className="custom-select__list";var o=i.values||[],a=document.createElement("li");a.setAttribute("tabindex","0"),a.setAttribute("role","option"),a.setAttribute("id",i.name+"_elem"),a.innerHTML=i.initialValue.name,a.setAttribute("data-value",i.initialValue.value),a.addEventListener("click",function(e){r.onListElementClick.bind(r)(e)}),this.itemsList.append(a),this.setSelectedElement(a),o.forEach(function(e,t){var n=document.createElement("li");n.setAttribute("tabindex","0"),n.setAttribute("role","option"),n.setAttribute("id",i.name+"_elem_"+t),n.innerHTML=e,n.setAttribute("data-value",e),n.addEventListener("click",r.onListElementClick.bind(r)),r.itemsList.append(n)}),this.select.append(this.itemsList),this.activeItemIdx=0,n.addEventListener("click",this.toggleDropDown.bind(this)),this.selectedValueBlock.addEventListener("click",this.toggleDropDown.bind(this)),this.select.addEventListener("keydown",this.handleKeyDown.bind(this))}}r.prototype={toggleDropDown:function(){this.itemsList.classList.contains("open")?this.itemsList.classList.remove("open"):this.itemsList.classList.add("open")},openDropDown:function(){this.itemsList.classList.add("open")},closeDropDown:function(){this.itemsList.classList.remove("open")},onListElementClick:function(e){var t=Array.prototype.indexOf.call(this.itemsList.children,e.target);-1!==!t&&(this.activeItemIdx=t,this.setSelectedElement(this.itemsList.children[this.activeItemIdx],!0),this.closeDropDown())},setSelectedElement:function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];if(e){var n=e.getAttribute("data-value");this.selectedValueBlock.setAttribute("data-value",n),this.select.setAttribute("data-value",n),this.selectedValueBlock.innerText=e.innerText;var r=!0,i=!1,o=void 0;try{for(var a,s=this.itemsList.children[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){a.value.setAttribute("aria-selected","")}}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}e.setAttribute("aria-selected","true"),this.select.setAttribute("aria-activedescendant",e.id),t&&this.onChange()}},handleKeyDown:function(e){var t=13,n=27,r=32,i=37,o=38,a=39,s=40;if(-1!==[s,o,r,t,i,a,n].indexOf(e.keyCode))switch(e.preventDefault(),e.keyCode){case s:case a:this.nextActiveListItem();break;case o:case i:this.previousActiveListItem();break;case r:this.openDropDown(),this.itemsList.children[this.activeItemIdx].focus();break;case t:var c=this.itemsList.children[this.activeItemIdx];if(!c)break;this.setSelectedElement(c),this.closeDropDown(),this.select.focus();break;case n:this.closeDropDown(),this.select.focus()}},nextActiveListItem:function(){var e=this.activeItemIdx>=this.itemsList.children.length-1?0:this.activeItemIdx+1;this.itemsList.children[e].focus(),this.activeItemIdx=e},previousActiveListItem:function(){var e=0===this.activeItemIdx?this.itemsList.children.length-1:this.activeItemIdx-1;this.itemsList.children[e].focus(),this.activeItemIdx=e}},t.exports=r},{}],3:[function(e,t,n){var r=e("idb"),i="restaurants",o=function(){function o(){_classCallCheck(this,o)}return _createClass(o,null,[{key:"fetchRestaurants",value:function(){var t=this;return fetch(o.DATABASE_URL+"/restaurants").then(function(e){return e.json()}).then(function(e){return t.putRestaurantsIntoIndexedDb(e).then(function(){return e})}).catch(function(e){return o.fetchRestaurantsFromIndexedDb().then(function(e){if(e.length)return e;throw new Error("Fetch error")})})}},{key:"fetchRestaurantWithReviews",value:function(t){var i=this;return Promise.all([this.fetchRestaurant(t),this.fetchRestaurantReviews(t)]).then(function(e){var t=_slicedToArray(e,2),n=t[0],r=t[1];return n.reviews=r,i.putRestaurantIntoIndexedDb(n).then(function(){return n})}).catch(function(e){return o.fetchRestaurantFromIndexedDb(t).then(function(e){if(e)return e;throw new Error("Fetch error")})})}},{key:"fetchRestaurant",value:function(e){return fetch(o.DATABASE_URL+"/restaurants/"+e).then(function(e){return e.json()})}},{key:"fetchRestaurantReviews",value:function(e){return fetch(o.DATABASE_URL+"/reviews/?restaurant_id="+e).then(function(e){return e.json()})}},{key:"fetchRestaurantsFromIndexedDb",value:function(){return o.openDatabase().then(function(e){return e.transaction(i).objectStore(i).getAll()})}},{key:"fetchRestaurantFromIndexedDb",value:function(t){return o.openDatabase().then(function(e){return e.transaction(i).objectStore(i).get(+t)})}},{key:"putRestaurantsIntoIndexedDb",value:function(n){return o.clearRestaurantsInIndexedDb().then(function(){return o.openDatabase().then(function(e){var t=e.transaction(i,"readwrite");return n.forEach(function(e){return t.objectStore(i).put(e)}),t.complete})})}},{key:"putRestaurantIntoIndexedDb",value:function(n){return o.openDatabase().then(function(e){var t=e.transaction(i,"readwrite");return t.objectStore(i).put(n),t.complete})}},{key:"clearRestaurantsInIndexedDb",value:function(){return o.openDatabase().then(function(e){var t=e.transaction(i,"readwrite");return t.objectStore(i).clear(),t.complete})}},{key:"openDatabase",value:function(){return r.open("restaurants-db",1,function(e){switch(e.oldVersion){case 0:e.createObjectStore(i,{keyPath:"id"}).createIndex("status","status")}})}},{key:"fetchRestaurantById",value:function(e){return o.fetchRestaurantWithReviews(e)}},{key:"fetchRestaurantByCuisine",value:function(t,e){o.fetchRestaurants().then(function(e){return e.filter(function(e){return e.cuisine_type==t})})}},{key:"fetchRestaurantByNeighborhood",value:function(t){return o.fetchRestaurants().then(function(e){return e.filter(function(e){return e.neighborhood==t})})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(n,r){return o.fetchRestaurants().then(function(e){var t=e;return"all"!=n&&(t=t.filter(function(e){return e.cuisine_type==n})),"all"!=r&&(t=t.filter(function(e){return e.neighborhood==r})),t})}},{key:"fetchNeighborhoodsAndCuisines",value:function(){return o.fetchRestaurants().then(function(n){var r=n.map(function(e,t){return n[t].neighborhood}),i=n.map(function(e,t){return n[t].cuisine_type});return{neighborhoods:r.filter(function(e,t){return r.indexOf(e)==t}),cuisines:i.filter(function(e,t){return i.indexOf(e)==t}),restaurants:n}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.id+"_small.jpg"}},{key:"imageSrcSetForRestaurant",value:function(e){return"/img/"+e.photograph}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:o.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337"}}]),o}();t.exports=o},{idb:1}],4:[function(e,t,n){var u=e("./dbhelper"),i=e("./accessibility-select"),r=e("./process"),o=!1;function a(){var e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.getAttribute("data-value"),r=t.getAttribute("data-value");u.fetchRestaurantByCuisineAndNeighborhood(n,r).then(function(e){!function(e){self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(function(e){return e.setMap(null)});self.markers=[],self.restaurants=e}(e),s(e)}).catch(function(e){console.error(e)})}function s(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants,n=document.getElementById("restaurants-list");e.forEach(function(e,t){n.append(function(e,t){var n=document.createElement("li");n.setAttribute("tabindex",0),1<t&&(n.className="hidden");var r=document.createElement("img");r.className="restaurant-img",r.src=u.imageUrlForRestaurant(e),r.setAttribute("alt","An image from the restaurant "+e.name),n.append(r);var i=document.createElement("div");i.className="restaurant-info";var o=document.createElement("h2");o.className="restaurant-card-name",o.setAttribute("tabindex","0"),o.innerHTML=e.name,i.append(o);var a=document.createElement("p");a.setAttribute("tabindex",0),a.innerHTML=e.neighborhood,i.append(a);var s=document.createElement("p");s.setAttribute("tabindex",0),s.innerHTML=e.address,i.append(s);var c=document.createElement("a");return c.innerHTML="View Details",c.href=u.urlForRestaurant(e),i.append(c),n.append(i),n}(e,t))}),function(){(0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants).forEach(function(e){var t=u.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",function(){window.location.href=t.url}),self.markers||(self.markers=[]),self.markers.push(t)})}(e)}document.addEventListener("DOMContentLoaded",function(e){console.log("DOMContentLoaded"),r.registerServiceWorker(),u.fetchNeighborhoodsAndCuisines().then(function(e){var t=e.restaurants,n=e.neighborhoods,r=e.cuisines;return function(){0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.neighborhoods,new i("#neighborhoods-select",{name:"Neighborhood",label:"Neighborhood",initialValue:{name:"All Neighborhoods",value:"all"},values:self.neighborhoods,onChange:a})}(self.neighborhoods=n),function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.cuisines;new i("#cuisines-select",{name:"Cuisines",label:"Cuisines",initialValue:{name:"All Cuisines",value:"all"},values:e,onChange:a})}(self.cuisines=r),t}).catch(function(e){console.error(e)}).then(function(e){s(e)})}),document.querySelector("#map-actions .toggle-map").onclick=function(){var e=document.getElementById("map");"none"===e.style.display?(this.setAttribute("aria-label","Close Google Map"),e.style.display="block"):(this.setAttribute("aria-label","Open Google Map"),e.style.display="none")},window.initMap=function(){self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),window.addEventListener("scroll",function(){o||(o=!0);var e=document.querySelectorAll("#restaurants-list li.hidden");Array.prototype.forEach.call(e,function(e){return e.classList.remove("hidden")})}),setTimeout(function(){document.getElementById("map").querySelector("iframe").setAttribute("title","Google map")},200)}},{"./accessibility-select":2,"./dbhelper":3,"./process":5}],5:[function(e,t,n){function r(e){e?e.addEventListener("statechange",function(){console.log("ServiceWorker state was changed to "+e.state),"installed"===e.state&&(console.log("Service worker installed and waiting for activation",e),i(e))}):console.log("Worker not defined!")}function i(e){var r,i;(r={action:"skipWaiting"},i=e,new Promise(function(t,n){var e=new MessageChannel;e.port1.onmessage=function(e){e.data.error?n(e.data.error):t(e.data)},i.postMessage(r,[e.port2])})).then(function(e){console.log(e)})}t.exports={registerServiceWorker:function(){if(!1 in navigator)throw new Error("serviceWorker not register");navigator.serviceWorker.register("/sw.js").then(function(e){var t;navigator.serviceWorker.controller&&(e.active&&console.log("There is an an active service worker"),e.waiting&&(console.log("waiting :",e.waiting),console.log("service worker is waiting"),i(e.waiting)),e.installing&&(console.log("installing : ",e),console.log("service worker status is installing"),r(e.installing)),e.addEventListener("updatefound",function(){console.log("service worker update found",e),r(e.installing)}),navigator.serviceWorker.addEventListener("controllerchange",function(){t||setTimeout(function(){window.location.reload(),t=!0},1e3)}))}).catch(function(e){console.log("Registration failed with "+e)})}}},{}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
